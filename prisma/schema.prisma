// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BASIC
  VERIFIED
  ADMIN
}

model User {
  userId              String        @id @default(uuid())
  email               String        @unique
  password            String
  role                Role          @default(BASIC)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime?     @updatedAt
  userProfile         UserProfile?  @relation
  createdProducts     Product[]     @relation("createdByUser")
  updatedProducts     Product[]     @relation("updatedByUser")
  createdSupermarkets Supermarket[] @relation("createdBySupermarketUser")
  updatedSupermarkets Supermarket[] @relation("updatedBySupermarketUser")
  // createdInventories Inventory[] @relation("createdByInventoryUser")
  // updatedInventories Inventory[] @relation("updatedByInventoryUser")
  // auditLogs            AuditLog[]
}

model UserProfile {
  profileId String    @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  address1  String
  city1     String
  address2  String?
  city2     String?
  address3  String?
  city3     String?
  address4  String?
  city4     String?
  dob       DateTime
  age       Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String?   @unique
}

enum ProductCategory {
  Produce
  Dairy
  Butcher
  Grocery
  Confectionary
}

model Product {
  productId       String          @id @default(uuid())
  productName     String          @unique
  productCategory ProductCategory
  productComments String
  createdAt       DateTime        @default(now())
  createdBy       User?           @relation("createdByUser", fields: [createdById], references: [userId])
  createdById     String?
  updatedAt       DateTime?       @updatedAt
  updatedBy       User?           @relation("updatedByUser", fields: [updatedById], references: [userId])
  updatedById     String?
  // inventory   Inventory[]
}

model Supermarket {
  supermarketId       String    @id @default(uuid())
  supermarketName     String    @unique
  supermarketComments String
  createdAt           DateTime  @default(now())
  createdBy           User?     @relation("createdBySupermarketUser", fields: [createdById], references: [userId])
  createdById         String?
  updatedAt           DateTime? @updatedAt
  updatedBy           User?     @relation("updatedBySupermarketUser", fields: [updatedById], references: [userId])
  updatedById         String?
  city                String
  //   inventory       Inventory[]

  @@index([city])
}

// model Inventory {
//   // id            String      @id @default(uuid())
//   price         Float
//   createdAt     DateTime    @default(now())
//   createdBy     User?       @relation("createdByInventoryUser", fields: [createdById], references: [userId])
//   createdById   String?
//   updatedAt     DateTime?   @updatedAt
//   updatedBy     User?       @relation("updatedByInventoryUser", fields: [updatedById], references: [userId])
//   updatedById   String?
//   productId     String
//   supermarketId String
//   product       Product     @relation(fields: [productId], references: [productId])
//   supermarket   Supermarket @relation(fields: [supermarketId], references: [supermarketId])

//   @@id([supermarketId, productId])
//   @@unique([productId, supermarketId])
//   @@index([supermarketId])
// }

// enum ActionType {
//   CREATE
//   UPDATE
//   DELETE
// }

// model AuditLog {
//   id         String     @id @default(uuid())
//   userId     String
//   action     ActionType
//   entityType String
//   entityId   String
//   oldValues  Json?
//   newValues  Json?
//   createdAt  DateTime   @default(now())
//   user       User       @relation(fields: [userId], references: [userId])
// }
